import { trackUser, setLang, getLang, totalUsage, FREE_TOTAL_LIMIT } from '../../db/database.js';

export function registerLanguageHandlers(bot){
    bot.start(async (ctx) => {
        trackUser(ctx.from.id, ctx.from.username);
        await ctx.reply(
            'üëã –ü—Ä–∏–≤—ñ—Ç! / –ü—Ä–∏–≤–µ—Ç! / Hello!\n\n' +
            '–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ ‚Äî —è –Ω–∞–π–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ –∫–æ—Ä–æ—Ç–∫–æ –æ–±—ä—è—Å–Ω—é –ø–æ—á–µ–º—É.\n\n' +
            'üåç Choose your language / –û–±–µ—Ä–∏ –º–æ–≤—É / –í—ã–±–µ—Ä–∏ —è–∑—ã–∫:\n' +
            'üá¨üáß English | üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ | üá∑üá∫ –†—É—Å—Å–∫–∏–π',
            { reply_markup: { keyboard: [['üá¨üáß English','üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞','üá∑üá∫ –†—É—Å—Å–∫–∏–π']], one_time_keyboard: true, resize_keyboard: true } }
        );
    });

    bot.hears(['üá∑üá∫ –†—É—Å—Å–∫–∏–π','–†—É—Å—Å–∫–∏–π'], async (ctx) => {
        setLang(ctx.from.id, 'ru');
        const used = totalUsage(ctx.from.id);
        await ctx.reply(`‚úÖ –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π. –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω —Å –≤–æ–ø—Ä–æ—Å–æ–º.\nüìä –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–≤—Å–µ–≥–¥–∞: ${Math.max(FREE_TOTAL_LIMIT - used, 0)} –∏–∑ ${FREE_TOTAL_LIMIT}.`);
    });

    bot.hears(['üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞','–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞'], async (ctx) => {
        setLang(ctx.from.id, 'uk');
        const used = totalUsage(ctx.from.id);
        await ctx.reply(`‚úÖ –ú–æ–≤–∞: —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞. –ù–∞–¥—ñ—à–ª–∏ —Å–∫—Ä—ñ–Ω –ø–∏—Ç–∞–Ω–Ω—è.\nüìä –ó–∞–ª–∏—à–∏–ª–æ—Å—å –Ω–∞–∑–∞–≤–∂–¥–∏: ${Math.max(FREE_TOTAL_LIMIT - used, 0)} —ñ–∑ ${FREE_TOTAL_LIMIT}.`);
    });

    bot.hears(['üá¨üáß English','English'], async (ctx) => {
        setLang(ctx.from.id, 'en');
        const used = totalUsage(ctx.from.id);
        await ctx.reply(`‚úÖ Language: English. Send a question screenshot.\nüìä Lifetime remaining: ${Math.max(FREE_TOTAL_LIMIT - used, 0)} of ${FREE_TOTAL_LIMIT}.`);
    });

    // –º—è–≥–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    bot.on('text', async (ctx, next) => {
        const msg = ctx.message?.text || '';
        if (msg.startsWith('/')) return next();

        const lang = getLang(ctx.from.id);
        const used = totalUsage(ctx.from.id);
        if (lang === 'ru') {
            await ctx.reply(`üñº –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ (A/B/C/D).\nüìä –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–≤—Å–µ–≥–¥–∞: ${Math.max(FREE_TOTAL_LIMIT - used, 0)} –∏–∑ ${FREE_TOTAL_LIMIT}.`);
        } else if (lang === 'uk') {
            await ctx.reply(`üñº –ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ/—Å–∫—Ä—ñ–Ω –ø–∏—Ç–∞–Ω–Ω—è –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ (A/B/C/D).\nüìä –ó–∞–ª–∏—à–∏–ª–æ—Å—å –Ω–∞–∑–∞–≤–∂–¥–∏: ${Math.max(FREE_TOTAL_LIMIT - used, 0)} —ñ–∑ ${FREE_TOTAL_LIMIT}.`);
        } else {
            await ctx.reply(`üñº Please send a photo/screenshot with multiple-choice options (A/B/C/D).\nüìä Lifetime remaining: ${Math.max(FREE_TOTAL_LIMIT - used, 0)} of ${FREE_TOTAL_LIMIT}.`);
        }
    });
}
