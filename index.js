import 'dotenv/config';
import { Telegraf } from 'telegraf';
import OpenAI from 'openai';
import express from 'express';

const app = express();

app.use(express.json());
app.get('/', (_, res) => res.send('Seaman Assistant OK'));

const PORT = process.env.PORT || 3000;

app.listen(PORT, () => console.log('HTTP on', PORT));

const bot = new Telegraf(process.env.BOT_TOKEN);
const ai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// –ü—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å: –∫—Ç–æ –Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
const userLanguage = new Map();

// ========== –í–´–ë–û–† –Ø–ó–´–ö–ê ==========
bot.start(async (ctx) => {
    await ctx.reply(
        'üåç Choose your language / –í—ã–±–µ—Ä–∏ —è–∑—ã–∫:\n\nüá¨üáß English\nüá∑üá∫ –†—É—Å—Å–∫–∏–π',
        {
            reply_markup: {
                keyboard: [['üá¨üáß English', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π']],
                one_time_keyboard: true,
                resize_keyboard: true,
            },
        }
    );
});

bot.hears(['üá¨üáß English', 'English'], async (ctx) => {
    userLanguage.set(ctx.from.id, 'en');
    await ctx.reply('‚úÖ Language set to English. Send a test photo with question.');
});

bot.hears(['üá∑üá∫ –†—É—Å—Å–∫–∏–π', '–†—É—Å—Å–∫–∏–π'], async (ctx) => {
    userLanguage.set(ctx.from.id, 'ru');
    await ctx.reply('‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: —Ä—É—Å—Å–∫–∏–π. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –≤–æ–ø—Ä–æ—Å–∞.');
});

// ========== –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û ==========
bot.on('photo', async (ctx) => {
    const lang = userLanguage.get(ctx.from.id) || 'en';
    try {
        await ctx.reply(lang === 'ru'
            ? 'üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–º—É...'
            : 'üì∑ Photo received. Checking topic...');

        const photos = ctx.message.photo;
        const fileId = photos[photos.length - 1].file_id;
        const file = await ctx.telegram.getFile(fileId);
        const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;

        // 1) –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–º—ã
       /* const { is_maritime, confidence } = await classifyQuestionImage(fileUrl, lang);

        if (!is_maritime || confidence < 60) {
            return ctx.reply(
                lang === 'ru'
                    ? 'üõë –ò–∑–≤–∏–Ω–∏, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –º–æ—Ä—Å–∫–æ–π —Ç–µ—Å—Ç. –ü—Ä–∏—à–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ —Å—É–¥–æ–≤—ã–º —Å–∏—Å—Ç–µ–º–∞–º, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, STCW, –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, MARPOL –∏ —Ç.–ø.'
                    : 'üõë Sorry, this doesn‚Äôt look like a maritime test. Please send a question about ship systems, safety, STCW, navigation, MARPOL, etc.'
            );
        } */



        // 2) –†–∞–∑–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–∫–æ—Ä–æ—Ç–∫–æ, –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞)


        const analysis = await analyzeQuestionImage(fileUrl, lang);
        await ctx.reply(analysis);
    } catch (e) {
        console.error('Photo error:', e);
        await ctx.reply(
            lang === 'ru'
                ? '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ —á—ë—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ A/B/C/D.'
                : '‚ö†Ô∏è Error processing the photo. Send a clear image with A/B/C/D options.'
        );
    }
});

// ========== –ê–ù–ê–õ–ò–ó –í–û–ü–†–û–°–ê ==========
async function classifyQuestionImage(imageUrl, lang = 'en') {
    const instruction =
        lang === 'ru'
            ? `–¢—ã ‚Äî –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä. –ü–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ–ø—Ä–µ–¥–µ–ª–∏, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –∫ –º–æ—Ä—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ:
- —Å—É–¥–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã, –º–µ—Ö–∞–Ω–∏–∑–º—ã, –º–∞—à–∏–Ω–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –Ω–∞–≤–∏–≥–∞—Ü–∏—è, –º–æ—Ä—Å–∫–æ–µ –ø—Ä–∞–≤–æ/–°–¢–ö–í (STCW), –∞–≤–∞—Ä–∏–π–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, —Å–Ω–∞–±–∂–µ–Ω–∏–µ, –±—É–Ω–∫–µ—Ä–æ–≤–∫–∞, —ç–∫–æ–ª–æ–≥–∏—è/ MARPOL.
–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ JSON –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞:
{"is_maritime": true|false, "confidence": 0..100}`
            : `You are a classifier. From the question image decide if it is MARITIME-related:
- ship systems, machinery, engine room, safety, navigation, maritime law/STCW, emergency procedures, provisioning, bunkering, ecology/MARPOL.
Reply STRICTLY as JSON, no extra text:
{"is_maritime": true|false, "confidence": 0..100}`;

    const res = await ai.responses.create({
        model: 'gpt-4.1-mini',
        temperature: 0,
        input: [
            { role: 'system', content: instruction },
            { role: 'user', content: [{ type: 'input_image', image_url: imageUrl }] }
        ]
    });

    // –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –¥–∞–∂–µ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –¥–æ–±–∞–≤–∏–ª–∞ –ª–∏—à–Ω–µ–µ
    const raw = (res.output_text || '').trim();
    const match = raw.match(/\{[\s\S]*\}/);
    try {
        const json = JSON.parse(match ? match[0] : '{}');
        return {
            is_maritime: !!json.is_maritime,
            confidence: Number(json.confidence) || 0
        };
    } catch {
        return { is_maritime: false, confidence: 0 };
    }
}


async function analyzeQuestionImage(imageUrl, lang) {
    const instruction =
        lang === 'ru'
            ? `–¢—ã ‚Äî –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –ù–∞ —Ñ–æ—Ç–æ –∏–∑–æ–±—Ä–∞–∂—ë–Ω –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ (A, B, C, D).
–û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –∫—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É.
–§–æ—Ä–º–∞—Ç:
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <–±—É–∫–≤–∞> ‚Äî <—Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞>
üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: <1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è>`
            : `You are a teacher. The image shows a multiple-choice question (A, B, C, D).
Find the correct answer and briefly explain why.
Format:
‚úÖ Correct answer: <letter> ‚Äî <option text>
üí° Explanation: <1‚Äì2 short sentences>`;

    try {
        const res = await ai.responses.create({
            model: 'gpt-4.1-mini',
            temperature: 0.2,
            input: [
                { role: 'system', content: instruction },
                { role: 'user', content: [{ type: 'input_image', image_url: imageUrl }] },
            ],
        });

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–æ—Ç–≤–µ—Ç + –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ)
        const out = (res.output_text || '')
            .split('\n')
            .filter(line => line.includes('‚úÖ') || line.includes('üí°'))
            .join('\n')
            .trim();

        return out || (lang === 'ru'
            ? '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —á–µ—Ç—á–µ.'
            : '‚ö†Ô∏è Could not recognize the question. Please send a clearer photo.');
    } catch (e) {
        console.error('Vision error:', e);
        return lang === 'ru'
            ? '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.'
            : '‚ö†Ô∏è Error analyzing photo. Try again later.';
    }
}

// ========== –ó–ê–ü–£–°–ö ==========
bot.on('text', async (ctx) => {
    const lang = userLanguage.get(ctx.from.id) || 'en';

    if (lang === 'ru') {
        await ctx.reply('üñº –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤.');
    } else {
        await ctx.reply('üñº I only accept photos with questions. Please send an image containing the test.');
    }
});

// ---- Webhook (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –≤ –ø—É—Ç–∏) ----
const BASE_URL = process.env.BASE_URL; // –Ω–∞–ø—Ä–∏–º–µ—Ä: https://seaman-bot.onrender.com
const WH_SECRET = process.env.WH_SECRET; // –∑–∞–¥–∞–π –≤ Render –ª—é–±–æ–π –¥–ª–∏–Ω–Ω—ã–π —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∫–ª—é—á
const WEBHOOK_PATH = '/tg/webhook';     // –ë–ï–ó —Ç–æ–∫–µ–Ω–∞ –∏ –¥–≤–æ–µ—Ç–æ—á–∏–π!

if (BASE_URL) {
    const url = `${BASE_URL.replace(/\/+$/, '')}${WEBHOOK_PATH}`;

    // 1) endpoint –¥–ª—è Telegram
    app.post(WEBHOOK_PATH, (req, res) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç (Telegram –ø—Ä–∏—à–ª—ë—Ç –µ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ)
        const headerSecret = req.get('x-telegram-bot-api-secret-token');
        if (!WH_SECRET || headerSecret === WH_SECRET) {
            bot.handleUpdate(req.body);
            return res.sendStatus(200);
        }
        return res.sendStatus(401);
    });

    // 2) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫ c —Å–µ–∫—Ä–µ—Ç–æ–º
    bot.telegram.setWebhook(url, { secret_token: WH_SECRET })
        .then(() => console.log('‚úÖ Webhook set to', url))
        .catch(err => console.error('‚ùå Webhook set error:', err));
} else {
    // –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
    bot.launch().then(() => console.log('‚úÖ Bot polling (local mode)'));
}

console.log('‚öôÔ∏è HTTP server listening...');
console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ-—Ç–µ—Å—Ç–∞–º–∏ –∏ –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞.');
