import { getLang, canUseToday, incUsage } from '../../db/database.js';
import { askVisionSafe, withConcurrency } from '../../utils/ai.js';

const lastHit = new Map();          // –∞–Ω—Ç–∏—Ñ–ª—É–¥
const inProgress = new Set();
const COOLDOWN_MS = 10_000;

function cooldownPassed(id){
    const now = Date.now(), prev = lastHit.get(id) || 0;
    if (now - prev < COOLDOWN_MS) return false;
    lastHit.set(id, now); return true;
}

async function analyzeQuestionImage(imageUrl, lang){
    const instruction = lang === 'ru'
        ? `–¢—ã ‚Äî –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –ù–∞ —Ñ–æ—Ç–æ –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ (A, B, C, D).
–û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –∫—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É.
–§–æ—Ä–º–∞—Ç:
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <–±—É–∫–≤–∞> ‚Äî <—Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞>
üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: <1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è>`
        : `You are a teacher. The image shows a multiple-choice question (A, B, C, D).
Find the correct answer and briefly explain why.
Format:
‚úÖ Correct answer: <letter> ‚Äî <option text>
üí° Explanation: <1‚Äì2 short sentences>`;

    const res = await askVisionSafe({
        model: 'gpt-4.1-mini',
        temperature: 0.2,
        input: [
            { role: 'system', content: instruction },
            { role: 'user', content: [{ type: 'input_image', image_url: imageUrl }] },
        ],
    });

    const out = (res.output_text || '')
        .split('\n')
        .filter(l => l.includes('‚úÖ') || l.includes('üí°'))
        .join('\n').trim();

    return out || (lang === 'ru'
        ? '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —á–µ—Ç—á–µ.'
        : '‚ö†Ô∏è Could not recognize the question. Please send a clearer photo.');
}

export function registerPhotoHandler(bot){
    bot.on('photo', async (ctx) => {
        const uid = ctx.from.id;
        const lang = getLang(uid);

        if (!cooldownPassed(uid)) {
            return ctx.reply(lang === 'ru' ? '‚è≥ –ü–æ–¥–æ–∂–¥–∏ 10 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–∏—à–ª–∏ —Å–Ω–æ–≤–∞.' : '‚è≥ Please wait 10 seconds and try again.');
        }
        if (inProgress.has(uid)) {
            return ctx.reply(lang === 'ru' ? 'üõ† –£–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ. –î–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞.' : 'üõ† I‚Äôm already analyzing your previous photo. Please wait.');
        }

        const { ok, used, limit } = canUseToday(uid);
        if (!ok) {
            return ctx.reply(lang === 'ru'
                ? `üö¶ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ${limit} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞.`
                : `üö¶ Daily limit of ${limit} images reached. Try again tomorrow.`);
        }

        inProgress.add(uid);
        try {
            await ctx.reply(lang === 'ru' ? 'üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é‚Ä¶' : 'üì∑ Photo received. Analyzing‚Ä¶');

            const photos = ctx.message.photo;
            const fileId = photos[photos.length - 1].file_id;
            const file = await ctx.telegram.getFile(fileId);
            const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;

            const result = await withConcurrency(() => analyzeQuestionImage(fileUrl, lang));

            incUsage(uid);
            const leftAfter = Math.max(limit - (used + 1), 0);
            const suffix = lang === 'ru'
                ? `\n\nüìä –°–µ–≥–æ–¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å: ${leftAfter} –∏–∑ ${limit}.`
                : `\n\nüìä Remaining today: ${leftAfter} of ${limit}.`;

            await ctx.reply(result + suffix);
        } catch (e) {
            if (e.message === 'Overloaded') {
                return ctx.reply(lang === 'ru' ? 'üßØ –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞, –ø–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.' : 'üßØ High load, please try in a minute.');
            }
            console.error('Photo handler error:', e);
            return ctx.reply(lang === 'ru' ? '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.' : '‚ö†Ô∏è Error during analysis. Please try later.');
        } finally {
            inProgress.delete(uid);
        }
    });
}
