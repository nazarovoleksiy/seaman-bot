// bot/handlers/photo.js
import {
    getLang,
    FREE_TOTAL_LIMIT,
    totalUsage,
    incUsage,
    myCreditsLeft,
    hasTimePass,
    myTimePassUntil,
    consumeOneCredit
} from '../../db/database.js';

import { preprocessToDataUrl } from '../../utils/image.js';
import { extractMcqFromImage } from '../../utils/ocr.js';
import { reasonWithConsensus } from '../../utils/reason.js'; // ‚Üê –∑–∞–º–µ–Ω–∏–ª–∏ solveMcq

import { withConcurrency } from '../../utils/ai.js';
import { getCachedAnswer, saveCachedAnswer } from '../../db/answerCache.js';

// ===== –∞–Ω—Ç–∏—Ñ–ª—É–¥ =====
const lastHit = new Map();
const inProgress = new Set();
const COOLDOWN_MS = 10_000;

function cooldownPassed(id) {
    const now = Date.now(), prev = lastHit.get(id) || 0;
    if (now - prev < COOLDOWN_MS) return false;
    lastHit.set(id, now);
    return true;
}

// ===== —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ =====
function leftMsFromSqlite(utcSql) {
    if (!utcSql) return 0;
    const t = new Date(utcSql.replace(' ', 'T') + 'Z').getTime();
    return Math.max(t - Date.now(), 0);
}
function formatHM(ms, lang) {
    if (ms <= 0) return lang === 'ru' ? '–Ω–µ—Ç' : lang === 'uk' ? '–Ω–µ–º–∞—î' : 'none';
    const totalMin = Math.floor(ms / 60000);
    const h = Math.floor(totalMin / 60);
    const m = totalMin % 60;
    if (lang === 'ru') {
        const hL = h === 1 ? '—á–∞—Å' : (h >= 2 && h <= 4 ? '—á–∞—Å–∞' : '—á–∞—Å–æ–≤');
        const mL = m === 1 ? '–º–∏–Ω—É—Ç–∞' : (m >= 2 && m <= 4 ? '–º–∏–Ω—É—Ç—ã' : '–º–∏–Ω—É—Ç');
        return h > 0 && m > 0 ? `${h} ${hL} ${m} ${mL}` : h > 0 ? `${h} ${hL}` : `${m} ${mL}`;
    } else if (lang === 'uk') {
        return h > 0 && m > 0 ? `${h} –≥–æ–¥ ${m} —Ö–≤` : h > 0 ? `${h} –≥–æ–¥` : `${m} —Ö–≤`;
    } else {
        const hL = h === 1 ? 'hour' : 'hours';
        const mL = m === 1 ? 'min' : 'mins';
        return h > 0 && m > 0 ? `${h} ${hL} ${m} ${mL}` : h > 0 ? `${h} ${hL}` : `${m} ${mL}`;
    }
}

function renderAnswer(out, lang) {
    const THR = Number(process.env.LOW_CONFIDENCE_THRESHOLD || 0.75);
    const low = typeof out.confidence === 'number' && out.confidence < THR;

    if (lang === 'ru') {
        return `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${out.answer_letter} ‚Äî ${out.answer_text}\n` +
            `üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: ${out.explanation || '‚Äî'}` +
            (low ? `\n‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (${Math.round(out.confidence * 100)}%). –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏—Å–ª–∞—Ç—å –±–æ–ª–µ–µ —á—ë—Ç–∫–∏–π —Å–∫—Ä–∏–Ω.` : ``);
    } else if (lang === 'uk') {
        return `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${out.answer_letter} ‚Äî ${out.answer_text}\n` +
            `üí° –ü–æ—è—Å–Ω–µ–Ω–Ω—è: ${out.explanation || '‚Äî'}` +
            (low ? `\n‚ö†Ô∏è –ù–∏–∑—å–∫–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å (${Math.round(out.confidence * 100)}%). –°–ø—Ä–æ–±—É–π –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —á—ñ—Ç–∫—ñ—à–∏–π —Å–∫—Ä–∏–Ω.` : ``);
    } else {
        return `‚úÖ Correct answer: ${out.answer_letter} ‚Äî ${out.answer_text}\n` +
            `üí° Explanation: ${out.explanation || '‚Äî'}` +
            (low ? `\n‚ö†Ô∏è Low confidence (${Math.round(out.confidence * 100)}%). Try a clearer full screenshot.` : ``);
    }
}

// ===== –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ =====
export function registerPhotoHandler(bot) {
    bot.on('photo', async (ctx) => {
        const uid = ctx.from.id;
        const lang = getLang(uid);

        if (!cooldownPassed(uid)) {
            return ctx.reply(
                lang === 'ru' ? '‚è≥ –ü–æ–¥–æ–∂–¥–∏ 10 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–∏—à–ª–∏ —Å–Ω–æ–≤–∞.' :
                    lang === 'uk' ? '‚è≥ –ó–∞—á–µ–∫–∞–π 10 —Å–µ–∫—É–Ω–¥ —ñ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.' :
                        '‚è≥ Please wait 10 seconds and try again.'
            );
        }

        if (inProgress.has(uid)) {
            return ctx.reply(
                lang === 'ru' ? 'üõ† –£–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ. –î–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞.' :
                    lang === 'uk' ? 'üõ† –£–∂–µ —Ä–æ–∑–±–∏—Ä–∞—é –ø–æ–ø–µ—Ä–µ–¥–Ω—î —Ñ–æ—Ç–æ. –ó–∞—á–µ–∫–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.' :
                        'üõ† I‚Äôm already analyzing your previous photo. Please wait.'
            );
        }

        // –¥–æ—Å—Ç—É–ø
        const hasPass = hasTimePass(uid);
        const used = totalUsage(uid);
        const credits = myCreditsLeft(uid);
        const freeLeft = Math.max(FREE_TOTAL_LIMIT - used, 0);

        if (!hasPass && freeLeft <= 0 && credits <= 0) {
            const msg = lang === 'ru'
                ? 'üö¶ –î–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è: –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–µ—Ç. –ö—É–ø–∏ –¥–æ—Å—Ç—É–ø: /buy'
                : lang === 'uk'
                    ? 'üö¶ –î–æ—Å—Ç—É–ø –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è: –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —Å–ø—Ä–æ–±–∏ –≤–∏—á–µ—Ä–ø–∞–Ω—ñ —ñ –∫—Ä–µ–¥–∏—Ç—ñ–≤ –Ω–µ–º–∞—î. –ö—É–ø–∏ –¥–æ—Å—Ç—É–ø: /buy'
                    : 'üö¶ Access ended: no free attempts and no credits left. Buy access: /buy';
            return ctx.reply(msg);
        }

        inProgress.add(uid);
        try {
            await ctx.reply(
                lang === 'ru' ? 'üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –£–ª—É—á—à–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é‚Ä¶' :
                    lang === 'uk' ? 'üì∑ –§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ. –ü–æ–∫—Ä–∞—â—É—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –π –∞–Ω–∞–ª—ñ–∑—É—é‚Ä¶' :
                        'üì∑ Photo received. Enhancing and analyzing‚Ä¶'
            );

            const photos = ctx.message.photo;
            const last = photos[photos.length - 1];
            const fileUid = last.file_unique_id;
            const file = await ctx.telegram.getFile(last.file_id);
            const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;

            // –∫—ç—à –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID –∫–∞—Ä—Ç–∏–Ω–∫–∏
            const VER = process.env.PIPE_VER || 'v1';
            const cached = getCachedAnswer(fileUid, VER);
            let answerObj = cached ? JSON.parse(cached) : null;

            if (!answerObj) {
                // 1) –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ (–µ—Å–ª–∏ —É–ø–∞–ª–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL)
                let dataUrl = null;
                try {
                    dataUrl = await withConcurrency(() => preprocessToDataUrl(fileUrl));
                } catch (e) {
                    console.warn('preprocessToDataUrl failed, using original url:', e?.message || e);
                    dataUrl = fileUrl;
                }

                // 2) OCR
                const ocr = await withConcurrency(() => extractMcqFromImage(dataUrl, lang));
                if (!ocr || !ocr.question || !Array.isArray(ocr.options) || ocr.options.length < 2) {
                    const msg = lang === 'ru'
                        ? '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω —Å –ø–æ–ª–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ A‚ÄìF.'
                        : lang === 'uk'
                            ? '‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è. –ù–∞–¥—ñ—à–ª–∏ —Å–∫—Ä–∏–Ω —ñ–∑ –ø–æ–≤–Ω–∏–º –ø–∏—Ç–∞–Ω–Ω—è–º —ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ A‚ÄìF.'
                            : '‚ö†Ô∏è Could not read the question. Please send a full screenshot with the question and options A‚ÄìF.';
                    await ctx.reply(msg);
                    inProgress.delete(uid);
                    return;
                }

                // 3) –†–µ—à–µ–Ω–∏–µ (reasoning) —Å self-check/–∫–æ–Ω—Å–µ–Ω—Å—É—Å–æ–º
                const r = await withConcurrency(() => reasonWithConsensus({
                    question: ocr.question,
                    options: ocr.options,
                    lang
                }));

                if (!r || !r.letter) {
                    const msg = lang === 'ru'
                        ? '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ—Ä–µ–Ω–Ω–æ —Ä–µ—à–∏—Ç—å. –ü—Ä–∏—à–ª–∏ –±–æ–ª–µ–µ —á—ë—Ç–∫–∏–π —Å–∫—Ä–∏–Ω.'
                        : lang === 'uk'
                            ? '‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–ø–µ–≤–Ω–µ–Ω–æ –≤–∏—Ä—ñ—à–∏—Ç–∏. –ù–∞–¥—ñ—à–ª–∏ —á—ñ—Ç–∫—ñ—à–∏–π —Å–∫—Ä–∏–Ω.'
                            : '‚ö†Ô∏è Could not confidently solve. Please send a clearer screenshot.';
                    await ctx.reply(msg);
                    inProgress.delete(uid);
                    return;
                }

                const opt = ocr.options.find(o => o.letter === r.letter);
                const ansText = opt ? opt.text : '';

                answerObj = {
                    answer_letter: r.letter,
                    answer_text: ansText,
                    explanation: r.explanation || '',
                    confidence: r.confidence ?? 0.5
                };

                // –∫—ç—à–∏—Ä—É–µ–º
                saveCachedAnswer(fileUid, VER, answerObj);
            }

            // ===== —É—á—ë—Ç –¥–æ—Å—Ç—É–ø–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É =====
            let deducted = 'none';
            if (hasPass) {
                deducted = 'pass'; // –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º
            } else if (used < FREE_TOTAL_LIMIT) {
                incUsage(uid);     // —Å–Ω–∞—á–∞–ª–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ
                deducted = 'free';
            } else if (credits > 0) {
                consumeOneCredit(uid); // –ø–æ—Ç–æ–º –∫—Ä–µ–¥–∏—Ç—ã
                deducted = 'credit';
            } else {
                const msg = lang === 'ru'
                    ? 'üö¶ –î–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ö—É–ø–∏ –¥–æ—Å—Ç—É–ø: /buy'
                    : lang === 'uk'
                        ? 'üö¶ –î–æ—Å—Ç—É–ø –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è. –ö—É–ø–∏ –¥–æ—Å—Ç—É–ø: /buy'
                        : 'üö¶ Access ended. Buy access: /buy';
                await ctx.reply(msg);
                inProgress.delete(uid);
                return;
            }

            const usedAfter    = deducted === 'free'   ? used + 1 : used;
            const creditsAfter = deducted === 'credit' ? credits - 1 : credits;
            const freeLeftNow  = Math.max(FREE_TOTAL_LIMIT - usedAfter, 0);

            const passMs  = leftMsFromSqlite(myTimePassUntil(uid));
            const passStr = passMs > 0
                ? (lang === 'ru' ? `–æ—Å—Ç–∞–ª–æ—Å—å ${formatHM(passMs, lang)}`
                    : lang === 'uk' ? `–∑–∞–ª–∏—à–∏–ª–æ—Å—å ${formatHM(passMs, lang)}`
                        : `left ${formatHM(passMs, lang)}`)
                : (lang === 'ru' ? '–Ω–µ—Ç' : lang === 'uk' ? '–Ω–µ–º–∞—î' : 'none');

            const suffix =
                lang === 'ru'
                    ? `\n\nüë§ –¢–≤–æ–π –¥–æ—Å—Ç—É–ø:\n‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${usedAfter} –∏–∑ ${FREE_TOTAL_LIMIT} (–æ—Å—Ç–∞–ª–æ—Å—å ${freeLeftNow})\n‚Ä¢ –ö—Ä–µ–¥–∏—Ç—ã: ${creditsAfter}\n‚Ä¢ Day Pass: ${passStr}`
                    : lang === 'uk'
                        ? `\n\nüë§ –¢–≤—ñ–π –¥–æ—Å—Ç—É–ø:\n‚Ä¢ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ª—ñ–º—ñ—Ç: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ ${usedAfter} —ñ–∑ ${FREE_TOTAL_LIMIT} (–∑–∞–ª–∏—à–∏–ª–æ—Å—å ${freeLeftNow})\n‚Ä¢ –ö—Ä–µ–¥–∏—Ç–∏: ${creditsAfter}\n‚Ä¢ Day Pass: ${passStr}`
                        : `\n\nüë§ Your access:\n‚Ä¢ Free limit: used ${usedAfter} of ${FREE_TOTAL_LIMIT} (left ${freeLeftNow})\n‚Ä¢ Credits: ${creditsAfter}\n‚Ä¢ Day Pass: ${passStr}`;

            await ctx.reply(renderAnswer(answerObj, lang) + suffix, {
                reply_markup: {
                    inline_keyboard: [[
                        { text: lang === 'ru' ? '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤' : lang === 'uk' ? '–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫' : 'Leave feedback', callback_data: 'fb:start' },
                        { text: lang === 'ru' ? '‚ùì –ü–æ–º–æ—â—å'       : lang === 'uk' ? '‚ùì –î–æ–ø–æ–º–æ–≥–∞'     : '‚ùì Help',        callback_data: 'help:open' }
                    ]]
                }
            });

        } catch (e) {
            console.error('Photo handler error:', e);
            await ctx.reply(
                lang === 'ru' ? '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.' :
                    lang === 'uk' ? '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.' :
                        '‚ö†Ô∏è Error during analysis. Please try later.'
            );
        } finally {
            inProgress.delete(uid);
        }
    });
}
