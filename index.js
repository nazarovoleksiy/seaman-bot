import 'dotenv/config';
import express from 'express';
import { Telegraf } from 'telegraf';
import OpenAI from 'openai';
import Database from 'better-sqlite3';

// =============== INIT =================
const app = express();
app.use(express.json()); // Telegram –ø—Ä–∏—Å—ã–ª–∞–µ—Ç JSON-—Ç–µ–ª–æ

const bot = new Telegraf(process.env.BOT_TOKEN);
const ai  = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// –ø—Ä–æ—Å—Ç–∞—è ¬´–ø–∞–º—è—Ç—å¬ª —è–∑—ã–∫–∞
const userLanguage = new Map();

// –∞–Ω—Ç–∏-—Ñ–ª—É–¥ + –æ–¥–∏–Ω–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
const lastHit = new Map();     // userId -> timestamp
const inProgress = new Set();  // userId
const COOLDOWN_MS = 10 * 1000; // 10 —Å–µ–∫—É–Ω–¥

function cooldownPassed(userId) {
    const now = Date.now();
    const prev = lastHit.get(userId) || 0;
    if (now - prev < COOLDOWN_MS) return false;
    lastHit.set(userId, now);
    return true;
}

// –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º + —Ç–∞–π–º–∞—É—Ç—ã
let running = 0;
const MAX_CONCURRENCY = Number(process.env.MAX_CONCURRENCY || 5);
async function withConcurrency(fn) {
    if (running >= MAX_CONCURRENCY) throw new Error('Overloaded');
    running++;
    try { return await fn(); } finally { running--; }
}
async function withTimeout(promise, ms = 25000) {
    let t;
    const timer = new Promise((_, rej) => (t = setTimeout(() => rej(new Error('Timeout')), ms)));
    try { return await Promise.race([promise, timer]); }
    finally { clearTimeout(t); }
}
async function askVisionSafe(req) {
    try   { return await withTimeout(ai.responses.create(req), 25000); }
    catch { return await withTimeout(ai.responses.create(req), 25000); }
}

// =============== DB: –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç =================
const db = new Database(process.env.DATABASE_URL || './data.db');
db.exec(`
CREATE TABLE IF NOT EXISTS usage_log (
  id     INTEGER PRIMARY KEY,
  tg_id  TEXT NOT NULL,
  day    TEXT NOT NULL,   -- YYYY-MM-DD (UTC)
  count  INTEGER NOT NULL DEFAULT 0,
  UNIQUE(tg_id, day)
);
`);
function todayUTC() {
    const d = new Date();
    const y = d.getUTCFullYear();
    const m = String(d.getUTCMonth()+1).padStart(2,'0');
    const dd= String(d.getUTCDate()).padStart(2,'0');
    return `${y}-${m}-${dd}`;
}
const qGet = db.prepare('SELECT count FROM usage_log WHERE tg_id=? AND day=?');
const qUpsert = db.prepare(`
  INSERT INTO usage_log (tg_id, day, count) VALUES(?,?,1)
  ON CONFLICT(tg_id, day) DO UPDATE SET count = count + 1
`);
const DAILY_LIMIT = Number(process.env.DAILY_LIMIT || 60); // –ª–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60
function usageForToday(tgId) {
    const row = qGet.get(String(tgId), todayUTC());
    return row?.count || 0;
}
function canUseToday(tgId) {
    const used = usageForToday(tgId);
    return { ok: used < DAILY_LIMIT, used, limit: DAILY_LIMIT, left: Math.max(DAILY_LIMIT - used, 0) };
}
function incUsage(tgId) {
    qUpsert.run(String(tgId), todayUTC());
}

// =============== GREETING & LANGUAGE =================
bot.start(async (ctx) => {
    await ctx.reply(
        'üëã –ü—Ä–∏–≤–µ—Ç! / Hello!\n\n' +
        '–Ø ‚Äî —Ç–≤–æ–π AI –ø–æ–º–æ—â–Ω–∏–∫ –≤ –æ–±—É—á–µ–Ω–∏–∏. / I‚Äôm your AI learning assistant.\n\n' +
        '‚ú® –ü–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –Ω–æ–≤–æ–º –∏ –Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω–æ–º. / I‚Äôll help you understand the unknown and learn new things.\n\n' +
        'üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–æ–ø—Ä–æ—Å–∞, —Ç–µ—Å—Ç–∞ –∏–ª–∏ —Ç–µ–º—ã ‚Äî –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è. / Send me a photo or screenshot of a question, test, or topic ‚Äî and I‚Äôll help you figure it out.\n\n' +
        'üåç Choose your language / –í—ã–±–µ—Ä–∏ —è–∑—ã–∫:\n\n' +
        'üá¨üáß English\nüá∑üá∫ –†—É—Å—Å–∫–∏–π',
        { reply_markup: { keyboard: [['üá¨üáß English', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π']], one_time_keyboard: true, resize_keyboard: true } }
    );
});
bot.hears(['üá∑üá∫ –†—É—Å—Å–∫–∏–π','–†—É—Å—Å–∫–∏–π'], async (ctx) => {
    userLanguage.set(ctx.from.id, 'ru');
    const used = usageForToday(ctx.from.id);
    await ctx.reply(
        '‚ú® –û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –Ω–æ–≤–æ–º –∏ –Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω–æ–º.\n' +
        'üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–æ–ø—Ä–æ—Å–∞, —Ç–µ—Å—Ç–∞ –∏–ª–∏ —Ç–µ–º—ã ‚Äî –∏ —è –ø–æ–º–æ–≥—É –ø–æ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.\n' +
        `üìä –°–µ–≥–æ–¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å: ${Math.max(DAILY_LIMIT - used, 0)} –∏–∑ ${DAILY_LIMIT}.`
    );
});
bot.hears(['üá¨üáß English','English'], async (ctx) => {
    userLanguage.set(ctx.from.id, 'en');
    const used = usageForToday(ctx.from.id);
    await ctx.reply(
        '‚ú® Great! I‚Äôll help you understand the unknown and learn new things.\n' +
        'üì∏ Send a photo or screenshot of any question, test, or topic ‚Äî I‚Äôll help you figure it out.\n' +
        `üìä Remaining today: ${Math.max(DAILY_LIMIT - used, 0)} of ${DAILY_LIMIT}.`
    );
});

// —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ç–æ ‚Äî –º—è–≥–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
bot.on('text', async (ctx) => {
    const lang = userLanguage.get(ctx.from.id) || 'en';
    const used = usageForToday(ctx.from.id);
    if (lang === 'ru') {
        return ctx.reply(`üñº –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.\nüìä –°–µ–≥–æ–¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å: ${Math.max(DAILY_LIMIT - used, 0)} –∏–∑ ${DAILY_LIMIT}.`);
    } else {
        return ctx.reply(`üñº Please send a photo/screenshot with a question and options.\nüìä Remaining today: ${Math.max(DAILY_LIMIT - used, 0)} of ${DAILY_LIMIT}.`);
    }
});

// =============== VISION: –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ =================
async function analyzeQuestionImage(imageUrl, lang) {
    const instruction =
        lang === 'ru'
            ? `–¢—ã ‚Äî –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –ù–∞ —Ñ–æ—Ç–æ –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ (A, B, C, D).
–û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –∫—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É.
–§–æ—Ä–º–∞—Ç:
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <–±—É–∫–≤–∞> ‚Äî <—Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞>
üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: <1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è>`
            : `You are a teacher. The image shows a multiple-choice question (A, B, C, D).
Find the correct answer and briefly explain why.
Format:
‚úÖ Correct answer: <letter> ‚Äî <option text>
üí° Explanation: <1‚Äì2 short sentences>`;

    const res = await askVisionSafe({
        model: 'gpt-4.1-mini',
        temperature: 0.2,
        input: [
            { role: 'system', content: instruction },
            { role: 'user', content: [{ type: 'input_image', image_url: imageUrl }] },
        ],
    });

    const out = (res.output_text || '')
        .split('\n')
        .filter(line => line.includes('‚úÖ') || line.includes('üí°'))
        .join('\n')
        .trim();

    return out || (lang === 'ru'
        ? '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —á–µ—Ç—á–µ.'
        : '‚ö†Ô∏è Could not recognize the question. Please send a clearer photo.');
}

bot.on('photo', async (ctx) => {
    const uid  = ctx.from.id;
    const lang = userLanguage.get(uid) || 'en';

    // –∞–Ω—Ç–∏-—Ñ–ª—É–¥
    if (!cooldownPassed(uid)) {
        return ctx.reply(lang === 'ru'
            ? '‚è≥ –ü–æ–¥–æ–∂–¥–∏ 10 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–∏—à–ª–∏ —Å–Ω–æ–≤–∞.'
            : '‚è≥ Please wait 10 seconds and try again.');
    }

    // –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑
    if (inProgress.has(uid)) {
        return ctx.reply(lang === 'ru'
            ? 'üõ† –£–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ. –î–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞.'
            : 'üõ† I‚Äôm already analyzing your previous photo. Please wait.');
    }

    // –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
    const { ok, used, limit, left } = canUseToday(uid);
    if (!ok) {
        return ctx.reply(lang === 'ru'
            ? `üö¶ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ${limit} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞.`
            : `üö¶ Daily limit of ${limit} images reached. Try again tomorrow.`);
    }

    inProgress.add(uid);
    try {
        await ctx.reply(lang === 'ru'
            ? 'üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é‚Ä¶'
            : 'üì∑ Photo received. Analyzing‚Ä¶');

        const photos  = ctx.message.photo;
        const fileId  = photos[photos.length - 1].file_id;
        const file    = await ctx.telegram.getFile(fileId);
        const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;

        const result = await withConcurrency(() => analyzeQuestionImage(fileUrl, lang));

        // —Å—á–∏—Ç–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
        incUsage(uid);
        const leftAfter = Math.max(limit - (used + 1), 0);

        const suffix = lang === 'ru'
            ? `\n\nüìä –°–µ–≥–æ–¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å: ${leftAfter} –∏–∑ ${limit}.`
            : `\n\nüìä Remaining today: ${leftAfter} of ${limit}.`;

        await ctx.reply(result + suffix);

    } catch (e) {
        if (e.message === 'Overloaded') {
            return ctx.reply(lang === 'ru'
                ? 'üßØ –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞, –ø–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.'
                : 'üßØ High load, please try in a minute.');
        }
        console.error('Photo handler error:', e);
        return ctx.reply(lang === 'ru'
            ? '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.'
            : '‚ö†Ô∏è Error during analysis. Please try again later.');
    } finally {
        inProgress.delete(uid);
    }
});

// =============== WEBHOOK (—Å–µ–∫—Ä–µ—Ç + –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –≤ –ø—É—Ç–∏) ===============
const BASE_URL     = process.env.BASE_URL;               // –Ω–∞–ø—Ä–∏–º–µ—Ä: https://seaman-bot.onrender.com
const WH_SECRET    = process.env.WH_SECRET;              // –ª—é–±–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ Environment
const WEBHOOK_PATH = '/tg/webhook';

if (BASE_URL) {
    const webhookUrl = `${BASE_URL.replace(/\/+$/, '')}${WEBHOOK_PATH}`;

    app.post(WEBHOOK_PATH, (req, res) => {
        const headerSecret = req.get('x-telegram-bot-api-secret-token');
        if (!WH_SECRET || headerSecret === WH_SECRET) {
            bot.handleUpdate(req.body);
            return res.sendStatus(200);
        }
        return res.sendStatus(401);
    });

    bot.telegram.setWebhook(webhookUrl, { secret_token: WH_SECRET })
        .then(() => console.log('‚úÖ Webhook set to', webhookUrl))
        .catch(err => console.error('‚ùå Webhook set error:', err));
} else {
    // –ª–æ–∫–∞–ª—å–Ω–æ –±–µ–∑ –≤–µ–±—Ö—É–∫–∞
    bot.launch().then(() => console.log('‚úÖ Bot polling (local mode)'));
}

// =============== HTTP health =================
app.get('/', (_, res) => res.send('Seaman Assistant OK'));
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log('HTTP on', PORT));

// –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
process.once('SIGINT',  () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
