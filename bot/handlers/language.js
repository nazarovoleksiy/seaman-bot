import { getLang, setLang, trackUser, canUseLifetime } from '../../db/database.js';

export function registerLanguageHandlers(bot){
    bot.start(async (ctx, next) => {
        // –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ —á–µ—Ä–µ–∑ deeplink /start feedback ‚Äî –ø—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç feedback.js
        if (ctx.startPayload === 'feedback') return next();

        trackUser(ctx.from.id);
        await ctx.reply(
            'üëã –ü—Ä–∏–≤–µ—Ç! / Hello!\n\n' +
            '–Ø ‚Äî AI –ø–æ–º–æ—â–Ω–∏–∫: —Ä–∞–∑–±–µ—Ä—É —Ç–µ—Å—Ç –ø–æ —Ñ–æ—Ç–æ, –ø–æ–∫–∞–∂—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –æ–±—ä—è—Å–Ω—é.\n' +
            'I‚Äôm your AI assistant: send a screenshot of a question ‚Äî I‚Äôll solve and explain.\n\n' +
            'üåç Choose your language / –í—ã–±–µ—Ä–∏ —è–∑—ã–∫:\nüá¨üáß English | üá∑üá∫ –†—É—Å—Å–∫–∏–π',
            { reply_markup: { keyboard: [['üá¨üáß English','üá∑üá∫ –†—É—Å—Å–∫–∏–π']], one_time_keyboard: true, resize_keyboard: true } }
        );
    });

    bot.hears(['üá∑üá∫ –†—É—Å—Å–∫–∏–π','–†—É—Å—Å–∫–∏–π'], async (ctx) => {
        setLang(ctx.from.id, 'ru');
        const { left, limit } = canUseLifetime(ctx.from.id);
        await ctx.reply(
            `‚úÖ –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π. –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–æ–ø—Ä–æ—Å–∞.\n` +
            `üìä –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–≤—Å–µ–≥–¥–∞: ${left} –∏–∑ ${limit}.`
        );
    });

    bot.hears(['üá¨üáß English','English'], async (ctx) => {
        setLang(ctx.from.id, 'en');
        const { left, limit } = canUseLifetime(ctx.from.id);
        await ctx.reply(
            `‚úÖ Language: English. Send a screenshot.\n` +
            `üìä Lifetime remaining: ${left} of ${limit}.`
        );
    });

    // —Ç–µ–∫—Å—Ç (–±–µ–∑ —Ñ–æ—Ç–æ): –ø–æ–¥—Å–∫–∞–∑–∫–∞ + –ø—Ä–æ–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥
    bot.on('text', async (ctx, next) => {
        const msg = ctx.message?.text || '';
        if (msg.startsWith('/')) return next(); // –∫–æ–º–∞–Ω–¥—ã –¥–∞–ª—å—à–µ

        const lang = getLang(ctx.from.id);
        const { left, limit } = canUseLifetime(ctx.from.id);

        if (lang === 'ru') {
            await ctx.reply(
                `üñº –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.\n` +
                `üìä –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–≤—Å–µ–≥–¥–∞: ${left} –∏–∑ ${limit}.`
            );
        } else {
            await ctx.reply(
                `üñº Please send a photo/screenshot with a question and options.\n` +
                `üìä Lifetime remaining: ${left} of ${limit}.`
            );
        }
    });
}
