import { canUseLifetime, getLang, incUsage, hasTimePass, creditsLeft, consumeOneCredit } from '../../db/database.js';
import { askVisionSafe, withConcurrency } from '../../utils/ai.js';

const lastHit = new Map();
const inProgress = new Set();
const COOLDOWN_MS = 10_000;

function cooldownPassed(id){
    const now = Date.now(), prev = lastHit.get(id) || 0;
    if (now - prev < COOLDOWN_MS) return false;
    lastHit.set(id, now); return true;
}

async function analyzeQuestionImage(imageUrl, lang){
    const instruction =
        lang === 'ru' ? `–¢—ã ‚Äî –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –ù–∞ —Ñ–æ—Ç–æ –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ (A, B, C, D).
–û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –∫—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É.
–§–æ—Ä–º–∞—Ç:
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <–±—É–∫–≤–∞> ‚Äî <—Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞>
üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: <1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è>` :
            lang === 'uk' ? `–¢–∏ ‚Äî –≤–∏–∫–ª–∞–¥–∞—á. –ù–∞ —Ñ–æ—Ç–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ (A, B, C, D).
–í–∏–∑–Ω–∞—á –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ –∫–æ—Ä–æ—Ç–∫–æ –ø–æ—è—Å–Ω–∏ —á–æ–º—É.
–§–æ—Ä–º–∞—Ç:
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <–ª—ñ—Ç–µ—Ä–∞> ‚Äî <—Ç–µ–∫—Å—Ç –≤–∞—Ä—ñ–∞–Ω—Ç—É>
üí° –ü–æ—è—Å–Ω–µ–Ω–Ω—è: <1‚Äì2 –∫–æ—Ä–æ—Ç–∫—ñ —Ä–µ—á–µ–Ω–Ω—è>` :
                `You are a teacher. The image shows a multiple-choice question (A, B, C, D).
Find the correct answer and briefly explain why.
Format:
‚úÖ Correct answer: <letter> ‚Äî <option text>
üí° Explanation: <1‚Äì2 short sentences>`;

    const res = await askVisionSafe({
        model: 'gpt-4.1-mini',
        temperature: 0.2,
        input: [
            { role: 'system', content: instruction },
            { role: 'user', content: [{ type: 'input_image', image_url: imageUrl }] },
        ],
    });

    const out = (res.output_text || '')
        .split('\n')
        .filter(l => l.includes('‚úÖ') || l.includes('üí°'))
        .join('\n').trim();

    return out || (
        lang === 'ru' ? '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —á–µ—Ç—á–µ.' :
            lang === 'uk' ? '‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è. –ù–∞–¥—ñ—à–ª–∏ —á—ñ—Ç–∫—ñ—à–µ —Ñ–æ—Ç–æ.' :
                '‚ö†Ô∏è Could not recognize the question. Please send a clearer photo.');
}

export function registerPhotoHandler(bot){
    bot.on('photo', async (ctx) => {
        const uid  = ctx.from.id;
        const lang = getLang(uid);

        if (!cooldownPassed(uid)) {
            return ctx.reply(lang==='ru' ? '‚è≥ –ü–æ–¥–æ–∂–¥–∏ 10 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–∏—à–ª–∏ —Å–Ω–æ–≤–∞.' :
                lang==='uk' ? '‚è≥ –ó–∞—á–µ–∫–∞–π 10 —Å–µ–∫—É–Ω–¥ —ñ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.' :
                    '‚è≥ Please wait 10 seconds and try again.');
        }
        if (inProgress.has(uid)) {
            return ctx.reply(lang==='ru' ? 'üõ† –£–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ. –î–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞.' :
                lang==='uk' ? 'üõ† –£–∂–µ —Ä–æ–∑–±–∏—Ä–∞—é –ø–æ–ø–µ—Ä–µ–¥–Ω—î —Ñ–æ—Ç–æ. –ó–∞—á–µ–∫–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.' :
                    'üõ† I‚Äôm already analyzing your previous photo. Please wait.');
        }

        // –ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–∞–≤–∞
        const hasPass = hasTimePass(uid);
        const credits = creditsLeft(uid);

        // –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤
        if (!hasPass && credits <= 0) {
            const { ok, used, limit } = canUseLifetime(uid);
            if (!ok) {
                const msg = lang==='ru'
                    ? `üôè –°–ø–∞—Å–∏–±–æ! –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ ${limit} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å: /buy`
                    : lang==='uk'
                        ? `üôè –î—è–∫—É—î–º–æ! –í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –≤—Å—ñ ${limit} –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤.\n–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏: /buy`
                        : `üôè Thank you! You used all ${limit} free requests.\nTo continue: /buy`;
                return ctx.reply(msg, {
                    reply_markup: { inline_keyboard: [[{ text: lang==='ru'?'üîì –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø':'üîì Get access', callback_data:'buy:day_1' }]] }
                });
            }
        }

        inProgress.add(uid);
        try {
            await ctx.reply(lang==='ru' ? 'üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é‚Ä¶' :
                lang==='uk' ? 'üì∑ –§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ. –ê–Ω–∞–ª—ñ–∑—É—é‚Ä¶' :
                    'üì∑ Photo received. Analyzing‚Ä¶');

            const photos  = ctx.message.photo;
            const fileId  = photos[photos.length - 1].file_id;
            const file    = await ctx.telegram.getFile(fileId);
            const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;

            const result = await withConcurrency(() => analyzeQuestionImage(fileUrl, lang));

            // —É—á—ë—Ç
            if (!hasPass && credits > 0) consumeOneCredit(uid); // —Å–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç
            incUsage(uid); // –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ lifetime

            await ctx.reply(result, {
                reply_markup: {
                    inline_keyboard: [[
                        {
                            text: lang === 'ru' ? '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'
                                : lang === 'uk' ? '–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫'
                                    : 'Leave feedback',
                            callback_data: 'fb:start'
                        },
                        {
                            text: lang === 'ru' ? '‚ùì –ü–æ–º–æ—â—å'
                                : lang === 'uk' ? '‚ùì –î–æ–ø–æ–º–æ–≥–∞'
                                    : '‚ùì Help',
                            callback_data: 'help:open'
                        }
                    ]]
                }
            });
        } catch (e) {
            console.error('Photo handler error:', e);
            return ctx.reply(lang==='ru' ? '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.' :
                lang==='uk' ? '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.' :
                    '‚ö†Ô∏è Error during analysis. Please try later.');
        } finally {
            inProgress.delete(uid);
        }
    });
}
