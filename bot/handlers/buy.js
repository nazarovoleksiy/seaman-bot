import { getLang, grantTimePass, grantCredits, logPayment } from '../../db/database.js';

const PLANS = {
    day_1:   { title: {ru:'–î–æ—Å—Ç—É–ø –Ω–∞ 1 –¥–µ–Ω—å', uk:'–î–æ—Å—Ç—É–ø –Ω–∞ 1 –¥–µ–Ω—å', en:'1-Day Access'}, hours: 24,   amountCents: 199, currency: 'USD', type:'time' },
    day_3:   { title: {ru:'–î–æ—Å—Ç—É–ø –Ω–∞ 3 –¥–Ω—è',  uk:'–î–æ—Å—Ç—É–ø –Ω–∞ 3 –¥–Ω—ñ',  en:'3-Day Access'}, hours: 24*3, amountCents: 499, currency: 'USD', type:'time' },
    day_7:   { title: {ru:'–î–æ—Å—Ç—É–ø –Ω–∞ 7 –¥–Ω–µ–π', uk:'–î–æ—Å—Ç—É–ø –Ω–∞ 7 –¥–Ω—ñ–≤', en:'7-Day Access'}, hours: 24*7, amountCents: 799, currency: 'USD', type:'time' },
    pack_100:{ title: {ru:'100 –æ—Ç–≤–µ—Ç–æ–≤',      uk:'100 –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π',    en:'100 Answers' }, credits:100, amountCents: 100, currency: 'USD', type:'credits' },
    pack_300:{ title: {ru:'300 –æ—Ç–≤–µ—Ç–æ–≤',      uk:'300 –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π',    en:'300 Answers' }, credits:300, amountCents: 250, currency: 'USD', type:'credits' }
};

export function registerBuyHandler(bot){
    bot.command('buy', async (ctx) => {
        const lang = getLang(ctx.from.id);
        const title = lang==='ru' ? '–í—ã–±–µ—Ä–∏ –ø–ª–∞–Ω:' : lang==='uk' ? '–û–±–µ—Ä—ñ—Ç—å –ø–ª–∞–Ω:' : 'Choose a plan:';
        await ctx.reply(title, {
            reply_markup: {
                inline_keyboard: [
                    [{ text:'‚è≥ 1 –¥–µ–Ω—å ‚Äî $1.99', callback_data:'buy:day_1' },
                        { text:'‚è≥ 3 –¥–Ω—è ‚Äî $4.99', callback_data:'buy:day_3' }],
                    [{ text:'‚è≥ 7 –¥–Ω–µ–π ‚Äî $7.99', callback_data:'buy:day_7' }],
                    [{ text:'üéü 100 ‚Äî $1', callback_data:'buy:pack_100' },
                        { text:'üéü 300 ‚Äî $2.5', callback_data:'buy:pack_300' }]
                ]
            }
        });
    });

    bot.action(/^buy:/, async (ctx) => {
        const key = ctx.match.input.split(':')[1];
        const plan = PLANS[key];
        if (!plan) return ctx.answerCbQuery('Unknown plan');
        try { await ctx.answerCbQuery(); } catch {}

        const lang = getLang(ctx.from.id);
        const title = plan.title[lang] || plan.title.en;

        // –¥–ª—è Telegram Payments —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:
        // currency ‚Äî —Ñ–∏–∞—Ç (USD), amount ‚Äî –≤ –¶–ï–ù–¢–ê–•
        await ctx.telegram.sendInvoice(ctx.chat.id, {
            title,
            description: 'NovaLearn access',
            payload: `plan:${key}`,
            currency: plan.currency,
            prices: [{ label: title, amount: plan.amountCents }],
            provider_token: process.env.PAYMENT_PROVIDER_TOKEN, // ‚úÖ –≤–æ—Ç —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
            start_parameter: `buy_${key}`
        });
    });

    // –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º pre-checkout
    bot.on('pre_checkout_query', async (ctx) => {
        try { await ctx.answerPreCheckoutQuery(true); }
        catch (e) { console.error('pre_checkout error', e); }
    });

    // —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
    bot.on('successful_payment', async (ctx) => {
        try {
            const sp = ctx.message.successful_payment;
            const payload = sp.invoice_payload || '';
            const key = payload.replace('plan:', '');
            const plan = PLANS[key];

            if (!plan) {
                await ctx.reply('Payment received, but plan is unknown. Contact support.');
                return;
            }

            // –≤—ã–¥–∞—ë–º –¥–æ—Å—Ç—É–ø
            if (plan.type === 'time') grantTimePass(ctx.from.id, plan.hours);
            else grantCredits(ctx.from.id, plan.credits);

            // –ª–æ–≥ –ø–ª–∞—Ç–µ–∂–∞ (—Ñ–∏–∞—Ç)
            logPayment({ tgId: ctx.from.id, plan: key, amountCents: sp.total_amount, currency: sp.currency });

            const lang = getLang(ctx.from.id);
            await ctx.reply(lang==='ru' ? '‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.' :
                lang==='uk' ? '‚úÖ –û–ø–ª–∞—Ç—É —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.' :
                    '‚úÖ Payment successful! Access activated.');
        } catch (e) {
            console.error('successful_payment error:', e);
            await ctx.reply('‚ö†Ô∏è Payment processed, but an error occurred. Please contact support.');
        }
    });
}
