// bot/handlers/feedback.js
import db, { saveFeedback, getLang } from '../../db/database.js';

const pending = new Map(); // userId -> –∂–¥—ë–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞

export function registerFeedbackHandler(bot) {
    // === –∫–æ–º–∞–Ω–¥–∞ /feedback ===
    bot.command('feedback', async (ctx) => {
        pending.set(ctx.from.id, true);
        const lang = getLang(ctx.from.id);
        await ctx.reply(
            lang === 'ru'
                ? 'üí¨ –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.'
                : 'üí¨ Please write your feedback in the next message.'
        );
    });

    // === –∫–æ–º–∞–Ω–¥–∞ /feedbacks ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã ===
    bot.command('feedbacks', async (ctx) => {
        const lang = getLang(ctx.from.id);

        try {
            const rows = db.prepare(
                'SELECT tg_id, username, text, created_at FROM feedback ORDER BY id DESC LIMIT 10'
            ).all();

            if (!rows.length) {
                return ctx.reply(
                    lang === 'ru'
                        ? '‚ùå –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.'
                        : '‚ùå No feedbacks yet.'
                );
            }

            let msg =
                lang === 'ru'
                    ? 'üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n\n'
                    : 'üìù Recent feedbacks:\n\n';

            for (const row of rows) {
                msg += `üë§ ${row.username || row.tg_id}\nüí¨ ${row.text}\n\n`;
            }

            await ctx.reply(msg.trim());
        } catch (err) {
            console.error('Feedback fetch error:', err);
            await ctx.reply(
                lang === 'ru'
                    ? '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤.'
                    : '‚ö†Ô∏è Error loading feedbacks.'
            );
        }
    });

    // === –ø—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ ===
    bot.on('text', async (ctx, next) => {
        const uid = ctx.from.id;

        // –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (ctx.message?.text?.startsWith('/')) return next();

        // –µ—Å–ª–∏ –Ω–µ –∂–¥—ë–º –æ—Ç–∑—ã–≤ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (!pending.has(uid)) return next();

        pending.delete(uid);
        const text = ctx.message.text?.trim();
        if (!text) return next();

        saveFeedback(uid, ctx.from.username, text);

        const lang = getLang(uid);
        await ctx.reply(lang === 'ru' ? 'üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!' : 'üôè Thanks for your feedback!');
    });
}
