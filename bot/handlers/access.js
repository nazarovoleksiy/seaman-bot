// bot/handlers/access.js
import {
    getLang,
    totalUsage,
    FREE_TOTAL_LIMIT,
    myCreditsLeft,
    myTimePassUntil
} from '../../db/database.js';

// –æ—Å—Ç–∞—Ç–æ–∫ –≤ –º—Å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è Day Pass
function getRemainingMs(utcSqlite) {
    if (!utcSqlite) return 0;
    const expires = new Date(utcSqlite.replace(' ', 'T') + 'Z').getTime(); // UTC
    const now = Date.now();
    return Math.max(expires - now, 0);
}

// —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ H —á M –º–∏–Ω (–∏–ª–∏ h m)
function formatHM(ms, lang) {
    if (ms <= 0) {
        return lang === 'ru' ? '–Ω–µ—Ç'
            : lang === 'uk' ? '–Ω–µ–º–∞—î'
                : 'none';
    }
    const totalMin = Math.floor(ms / 60000);
    const h = Math.floor(totalMin / 60);
    const m = totalMin % 60;

    if (lang === 'ru') {
        const hLabel = h === 1 ? '—á–∞—Å' : (h >= 2 && h <= 4 ? '—á–∞—Å–∞' : '—á–∞—Å–æ–≤');
        const mLabel = (m === 1) ? '–º–∏–Ω—É—Ç–∞' : (m >= 2 && m <= 4 ? '–º–∏–Ω—É—Ç—ã' : '–º–∏–Ω—É—Ç');
        if (h > 0 && m > 0) return `${h} ${hLabel} ${m} ${mLabel}`;
        if (h > 0) return `${h} ${hLabel}`;
        return `${m} ${mLabel}`;
    } else if (lang === 'uk') {
        // –ø—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º–∞ –±–µ–∑ —Å–∫–ª–æ–Ω–µ–Ω–∏–π
        if (h > 0 && m > 0) return `${h} –≥–æ–¥ ${m} —Ö–≤`;
        if (h > 0) return `${h} –≥–æ–¥`;
        return `${m} —Ö–≤`;
    } else {
        // en
        const hLabel = h === 1 ? 'hour' : 'hours';
        const mLabel = m === 1 ? 'min' : 'mins';
        if (h > 0 && m > 0) return `${h} ${hLabel} ${m} ${mLabel}`;
        if (h > 0) return `${h} ${hLabel}`;
        return `${m} ${mLabel}`;
    }
}

export function registerAccessCommand(bot) {
    bot.command('access', async (ctx) => {
        const lang = getLang(ctx.from.id);

        const used = totalUsage(ctx.from.id);
        const leftFree = Math.max(FREE_TOTAL_LIMIT - used, 0);
        const credits = myCreditsLeft(ctx.from.id);

        const untilSql = myTimePassUntil(ctx.from.id);     // 'YYYY-MM-DD HH:MM:SS' (UTC) or null
        const leftMs   = getRemainingMs(untilSql);         // 0 –µ—Å–ª–∏ –Ω–µ—Ç
        const leftText = formatHM(leftMs, lang);           // ¬´–Ω–µ—Ç¬ª / ¬´–Ω–µ–º–∞—î¬ª / ¬´none¬ª –∏–ª–∏ ¬´5 —á–∞—Å–æ–≤ 10 –º–∏–Ω—É—Ç¬ª

        let lines = [];

        if (lang === 'ru') {
            lines.push('üîê *–î–æ—Å—Ç—É–ø*');
            lines.push(`‚Ä¢ Day Pass: ${leftMs > 0 ? `–æ—Å—Ç–∞–ª–æ—Å—å ${leftText}` : '–Ω–µ—Ç'}`);
            lines.push(`‚Ä¢ –ö—Ä–µ–¥–∏—Ç—ã: ${credits}`);
            lines.push(`‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç: –æ—Å—Ç–∞–ª–æ—Å—å ${leftFree} –∏–∑ ${FREE_TOTAL_LIMIT} (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${used})`);
            lines.push('');
            lines.push('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø: /buy');
        } else if (lang === 'uk') {
            lines.push('üîê *–î–æ—Å—Ç—É–ø*');
            lines.push(`‚Ä¢ Day Pass: ${leftMs > 0 ? `–∑–∞–ª–∏—à–∏–ª–æ—Å—å ${leftText}` : '–Ω–µ–º–∞—î'}`);
            lines.push(`‚Ä¢ –ö—Ä–µ–¥–∏—Ç–∏: ${credits}`);
            lines.push(`‚Ä¢ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ª—ñ–º—ñ—Ç: –∑–∞–ª–∏—à–∏–ª–æ—Å—å ${leftFree} —ñ–∑ ${FREE_TOTAL_LIMIT} (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ ${used})`);
            lines.push('');
            lines.push('–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–æ—Å—Ç—É–ø: /buy');
        } else {
            lines.push('üîê *Access*');
            lines.push(`‚Ä¢ Day Pass: ${leftMs > 0 ? `left ${leftText}` : 'none'}`);
            lines.push(`‚Ä¢ Credits: ${credits}`);
            lines.push(`‚Ä¢ Free limit: ${leftFree} of ${FREE_TOTAL_LIMIT} left (used ${used})`);
            lines.push('');
            lines.push('To extend access: /buy');
        }

        await ctx.reply(lines.join('\n'), { parse_mode: 'Markdown' });
    });
}
